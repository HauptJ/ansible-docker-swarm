---
sudo: required

env:
  - distribution: centos
    version: 7

services:
  - docker

before_install:
  - 'sudo docker pull ${distribution}:${version}'
  - 'sudo docker build --no-cache --rm --file=Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible .'

script:
  - chmod -x vault_test.txt
  # Test Docker Playbook
  - cp vault_test/vault_test_docker.yml ./group_vars/docker/vault.yml
  - container_id=$(mktemp)
  - 'sudo docker run --detach --privileged -v /sys/fs/cgroup:/sys/fs/cgroup --volume="${PWD}":/root ${distribution}-${version}:ansible > "${container_id}"'
  - 'sudo docker exec "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=1 ansible-playbook -v /root/docker.yml --vault-password-file /root/vault_test.txt --syntax-check'
  - 'sudo docker exec "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=1 ansible-playbook -v /root/docker.yml --vault-password-file /root/vault_test.txt --skip-tags "ipv6,open_ports,close_ports"'
  - 'sudo docker rm -f "$(cat ${container_id})"'
  # Test Firewall Playbook
  - cp vault_test/vault_test_firewall.yml ./group_vars/firewall/vault.yml
  - container_id=$(mktemp)
  - 'sudo docker run --detach --privileged -v /sys/fs/cgroup:/sys/fs/cgroup --volume="${PWD}":/root ${distribution}-${version}:ansible > "${container_id}"'
  - 'sudo docker exec "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=1 ansible-playbook -v /root/firewall.yml --vault-password-file /root/vault_test.txt --syntax-check'
  - 'sudo docker exec "$(cat ${container_id})" env ANSIBLE_FORCE_COLOR=1 ansible-playbook -v /root/firewall.yml --vault-password-file /root/vault_test.txt --skip-tags "restart,deploy,restore,repo,test,selinux,ipv6"'
  - 'sudo docker rm -f "$(cat ${container_id})"'
